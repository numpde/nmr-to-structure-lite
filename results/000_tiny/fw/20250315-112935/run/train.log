[2025-03-15 11:29:50,397 INFO] Missing transforms field for corpus_1 data, set to default: [].
[2025-03-15 11:29:50,397 WARNING] Corpus corpus_1's weight should be given. We default it to 1 for you.
[2025-03-15 11:29:50,397 INFO] Missing transforms field for valid data, set to default: [].
[2025-03-15 11:29:50,397 INFO] Parsed 2 corpora from -data.
[2025-03-15 11:29:50,397 INFO] Get special vocabs from Transforms: {'src': [], 'tgt': []}.
[2025-03-15 11:29:50,398 INFO] The first 10 tokens of the vocabs are:['<unk>', '<blank>', '<s>', '</s>', '|', 'J', '1H', '2H', 'm', 's']
[2025-03-15 11:29:50,398 INFO] The decoder start token is: <s>
[2025-03-15 11:29:50,398 INFO] Building model...
[2025-03-15 11:29:51,332 INFO] Switching model to float32 for amp/apex_amp
[2025-03-15 11:29:51,332 INFO] Non quantized layer compute is fp32
[2025-03-15 11:29:51,832 INFO] NMTModel(
  (encoder): TransformerEncoder(
    (embeddings): Embeddings(
      (make_embedding): Sequential(
        (emb_luts): Elementwise(
          (0): Embedding(1104, 32, padding_idx=1)
        )
        (pe): PositionalEncoding()
      )
      (dropout): Dropout(p=0.3, inplace=False)
    )
    (transformer): ModuleList(
      (0-1): 2 x TransformerEncoderLayer(
        (self_attn): MultiHeadedAttention(
          (linear_keys): Linear(in_features=32, out_features=32, bias=False)
          (linear_values): Linear(in_features=32, out_features=32, bias=False)
          (linear_query): Linear(in_features=32, out_features=32, bias=False)
          (softmax): Softmax(dim=-1)
          (dropout): Dropout(p=0.2, inplace=False)
          (final_linear): Linear(in_features=32, out_features=32, bias=False)
        )
        (feed_forward): PositionwiseFeedForward(
          (w_1): Linear(in_features=32, out_features=32, bias=False)
          (w_2): Linear(in_features=32, out_features=32, bias=False)
          (layer_norm): LayerNorm((32,), eps=1e-06, elementwise_affine=True)
          (dropout_1): Dropout(p=0.3, inplace=False)
          (dropout_2): Dropout(p=0.3, inplace=False)
        )
        (layer_norm): LayerNorm((32,), eps=1e-06, elementwise_affine=True)
        (dropout): Dropout(p=0.3, inplace=False)
      )
    )
    (layer_norm): LayerNorm((32,), eps=1e-06, elementwise_affine=True)
  )
  (decoder): TransformerDecoder(
    (embeddings): Embeddings(
      (make_embedding): Sequential(
        (emb_luts): Elementwise(
          (0): Embedding(40, 32, padding_idx=1)
        )
        (pe): PositionalEncoding()
      )
      (dropout): Dropout(p=0.3, inplace=False)
    )
    (layer_norm): LayerNorm((32,), eps=1e-06, elementwise_affine=True)
    (transformer_layers): ModuleList(
      (0-1): 2 x TransformerDecoderLayer(
        (self_attn): MultiHeadedAttention(
          (linear_keys): Linear(in_features=32, out_features=32, bias=False)
          (linear_values): Linear(in_features=32, out_features=32, bias=False)
          (linear_query): Linear(in_features=32, out_features=32, bias=False)
          (softmax): Softmax(dim=-1)
          (dropout): Dropout(p=0.2, inplace=False)
          (final_linear): Linear(in_features=32, out_features=32, bias=False)
        )
        (feed_forward): PositionwiseFeedForward(
          (w_1): Linear(in_features=32, out_features=32, bias=False)
          (w_2): Linear(in_features=32, out_features=32, bias=False)
          (layer_norm): LayerNorm((32,), eps=1e-06, elementwise_affine=True)
          (dropout_1): Dropout(p=0.3, inplace=False)
          (dropout_2): Dropout(p=0.3, inplace=False)
        )
        (layer_norm_1): LayerNorm((32,), eps=1e-06, elementwise_affine=True)
        (dropout): Dropout(p=0.3, inplace=False)
        (context_attn): MultiHeadedAttention(
          (linear_keys): Linear(in_features=32, out_features=32, bias=False)
          (linear_values): Linear(in_features=32, out_features=32, bias=False)
          (linear_query): Linear(in_features=32, out_features=32, bias=False)
          (softmax): Softmax(dim=-1)
          (dropout): Dropout(p=0.2, inplace=False)
          (final_linear): Linear(in_features=32, out_features=32, bias=False)
        )
        (layer_norm_2): LayerNorm((32,), eps=1e-06, elementwise_affine=True)
      )
    )
  )
  (generator): Linear(in_features=32, out_features=40, bias=True)
)
[2025-03-15 11:29:51,833 INFO] encoder: 47936
[2025-03-15 11:29:51,833 INFO] decoder: 23528
[2025-03-15 11:29:51,833 INFO] * number of parameters: 71464
[2025-03-15 11:29:51,834 INFO] Trainable parameters = {'torch.float32': 71464, 'torch.float16': 0, 'torch.uint8': 0, 'torch.int8': 0}
[2025-03-15 11:29:51,834 INFO] Non trainable parameters = {'torch.float32': 0, 'torch.float16': 0, 'torch.uint8': 0, 'torch.int8': 0}
[2025-03-15 11:29:51,834 INFO]  * src vocab size = 1104
[2025-03-15 11:29:51,834 INFO]  * tgt vocab size = 40
[2025-03-15 11:29:51,933 INFO] Starting training on GPU: [0]
[2025-03-15 11:29:51,933 INFO] Start training loop and validate every 2 steps...
[2025-03-15 11:29:51,933 INFO] Scoring with: None
  with torch.cuda.amp.autocast(enabled=self.optim.amp):
  self.gen = func(*args, **kwds)
[2025-03-15 11:30:19,426 INFO] Step  2/    5; acc: 0.0; ppl:   nan; xent: nan; lr: 0.00000; sents:     105; bsz:  428/ 237/ 7; 249/138 tok/s;     27 sec;
The batch will be filled until we reach 1, its size may exceed 32 tokens
  with torch.cuda.amp.autocast(enabled=self.optim.amp):
The batch will be filled until we reach 1, its size may exceed 32 tokens
[2025-03-15 11:30:27,789 INFO] valid stats calculation
                           took: 8.36251425743103 s.
[2025-03-15 11:30:27,790 INFO] Train perplexity: nan
[2025-03-15 11:30:27,790 INFO] Train accuracy: 0.0264201
[2025-03-15 11:30:27,790 INFO] Sentences processed: 105
[2025-03-15 11:30:27,790 INFO] Average bsz:  428/ 237/ 7
[2025-03-15 11:30:27,790 INFO] Validation perplexity: nan
[2025-03-15 11:30:27,790 INFO] Validation accuracy: 0
[2025-03-15 11:30:27,962 INFO] Step  4/    5; acc: 0.0; ppl:   nan; xent: nan; lr: 0.00000; sents:      93; bsz:  441/ 248/ 6; 826/464 tok/s;     36 sec;
The batch will be filled until we reach 1, its size may exceed 32 tokens
The batch will be filled until we reach 1, its size may exceed 32 tokens
[2025-03-15 11:30:36,509 INFO] valid stats calculation
                           took: 8.546327352523804 s.
[2025-03-15 11:30:36,509 INFO] Train perplexity: nan
[2025-03-15 11:30:36,509 INFO] Train accuracy: 0.0129066
[2025-03-15 11:30:36,509 INFO] Sentences processed: 198
[2025-03-15 11:30:36,509 INFO] Average bsz:  434/ 242/ 6
[2025-03-15 11:30:36,509 INFO] Validation perplexity: nan
[2025-03-15 11:30:36,509 INFO] Validation accuracy: 0
[2025-03-15 11:30:54,501 INFO] Saving checkpoint /home/ra/tmp/nmr-to-structure-lite/000_tiny/fw/20250315-112935/run/model_step_5.pt
